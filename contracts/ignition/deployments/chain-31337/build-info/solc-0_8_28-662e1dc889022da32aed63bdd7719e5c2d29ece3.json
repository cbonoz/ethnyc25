{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-662e1dc889022da32aed63bdd7719e5c2d29ece3",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SimpleOfferContract.sol": "project/contracts/SimpleOfferContract.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@4.9.6/security/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      "project/contracts/SimpleOfferContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract SimpleOfferContract is ReentrancyGuard {\n    \n    // Offer metadata structure\n    struct OfferMetadata {\n        string title;\n        string description;\n        string serviceType;\n        string deliverables;\n        uint256 amount;\n        uint256 deadline;\n        bool isActive;\n        uint256 createdAt;\n        uint256 depositAmount;\n    }\n    \n    // Offer status structure\n    struct OfferStatus {\n        address owner;\n        address client;\n        bool isAccepted;\n        bool isFunded;\n        bool isCompleted;\n        bool isDepositPaid;\n        uint256 paidAmount;\n        uint256 remainingAmount;\n    }\n    \n    // Client offer request structure\n    struct ClientOfferRequest {\n        address clientAddress;\n        string message;\n        uint256 requestedAt;\n        bool isRejected;\n    }\n    \n    // Contract state\n    address public owner;\n    address public client;\n    OfferMetadata public offerMetadata;\n    IERC20 public paymentToken;\n    bool public isAccepted;\n    bool public isCompleted;\n    bool public isFunded;\n    bool public isDepositPaid;\n    uint256 public paidAmount;\n    \n    // Client offer requests\n    mapping(address => ClientOfferRequest) public clientOfferRequests;\n    address[] public requesterAddresses;\n    address public pendingClient;\n    \n    // Events\n    event OfferCreated(address indexed owner, uint256 amount, string title);\n    event ClientRequested(address indexed client, string message, uint256 timestamp);\n    event OfferRequestRejected(address indexed client, uint256 timestamp);\n    event OfferAccepted(address indexed client, uint256 timestamp);\n    event OfferFunded(address indexed funder, uint256 amount);\n    event DepositPaid(address indexed client, uint256 amount);\n    event RemainingBalancePaid(address indexed client, uint256 amount);\n    event OfferCompleted(address indexed owner, uint256 timestamp);\n    event FundsWithdrawn(address indexed recipient, uint256 amount);\n    event OfferDeactivated(address indexed owner, uint256 timestamp);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only offer owner can call this function\");\n        _;\n    }\n    \n    modifier onlyClient() {\n        require(msg.sender == client, \"Only designated client can call this function\");\n        _;\n    }\n    \n    constructor(\n        string memory _title,\n        string memory _description,\n        string memory _serviceType,\n        string memory _deliverables,\n        uint256 _amount,\n        uint256 _deadline,\n        address _paymentToken,\n        uint256 _depositAmount\n    ) {\n        owner = msg.sender;\n        paymentToken = IERC20(_paymentToken);\n        \n        // Validate deposit amount if provided\n        if (_depositAmount > 0) {\n            require(_depositAmount < _amount, \"Deposit amount must be less than total amount\");\n        }\n        \n        offerMetadata = OfferMetadata({\n            title: _title,\n            description: _description,\n            serviceType: _serviceType,\n            deliverables: _deliverables,\n            amount: _amount,\n            deadline: _deadline,\n            isActive: true,\n            createdAt: block.timestamp,\n            depositAmount: _depositAmount\n        });\n        \n        emit OfferCreated(owner, _amount, _title);\n    }\n    \n    // Request and fund offer (handles both full payment and deposit)\n    function requestAndFundOffer(string memory _message) external nonReentrant {\n        require(offerMetadata.isActive, \"Offer is not active\");\n        require(!isAccepted, \"Offer already accepted\");\n        require(!isCompleted, \"Offer already completed\");\n        require(msg.sender != owner, \"Owner cannot request their own offer\");\n        require(clientOfferRequests[msg.sender].clientAddress == address(0), \"Already requested\");\n        \n        // Create the request\n        clientOfferRequests[msg.sender] = ClientOfferRequest({\n            clientAddress: msg.sender,\n            message: _message,\n            requestedAt: block.timestamp,\n            isRejected: false\n        });\n        \n        requesterAddresses.push(msg.sender);\n        \n        // Set this client as the pending client (not yet accepted, waiting for owner decision)\n        pendingClient = msg.sender;\n        \n        // Determine payment amount (deposit or full amount)\n        uint256 paymentAmount;\n        if (offerMetadata.depositAmount > 0) {\n            paymentAmount = offerMetadata.depositAmount;\n            require(paymentAmount > 0, \"Deposit amount must be greater than 0\");\n            require(paymentAmount < offerMetadata.amount, \"Deposit must be less than total amount\");\n        } else {\n            paymentAmount = offerMetadata.amount;\n        }\n        \n        // Transfer payment\n        require(paymentToken.transferFrom(msg.sender, address(this), paymentAmount), \"Payment transfer failed\");\n        paidAmount = paymentAmount;\n        \n        if (offerMetadata.depositAmount > 0) {\n            isDepositPaid = true;\n            emit DepositPaid(msg.sender, paymentAmount);\n        } else {\n            isFunded = true;\n            emit OfferFunded(msg.sender, paymentAmount);\n        }\n        \n        // Emit request event\n        emit ClientRequested(msg.sender, _message, block.timestamp);\n    }\n\n    // Reject a client offer request (owner only) - allows client to withdraw funds if they paid\n    function rejectOfferRequest(address _clientAddress) external onlyOwner {\n        require(clientOfferRequests[_clientAddress].clientAddress != address(0), \"No request found\");\n        require(!clientOfferRequests[_clientAddress].isRejected, \"Request already rejected\");\n        require(!isCompleted, \"Cannot reject after completion\");\n        require(_clientAddress == pendingClient, \"Can only reject the pending client\");\n        \n        clientOfferRequests[_clientAddress].isRejected = true;\n        \n        // Clear the pending client since they're rejected\n        pendingClient = address(0);\n        \n        emit OfferRequestRejected(_clientAddress, block.timestamp);\n    }\n\n    // Withdraw funds after being rejected (for clients who were rejected after paying)\n    function withdrawAfterRejection() external nonReentrant {\n        require(clientOfferRequests[msg.sender].clientAddress != address(0), \"No request found\");\n        require(clientOfferRequests[msg.sender].isRejected, \"Request not rejected\");\n        \n        uint256 balance = paymentToken.balanceOf(address(this));\n        require(balance > 0, \"No funds to withdraw\");\n        \n        // Calculate how much this client paid (if they were the pending client)\n        uint256 refundAmount = 0;\n        if (paidAmount > 0 && msg.sender == clientOfferRequests[msg.sender].clientAddress) {\n            refundAmount = paidAmount;\n        }\n        \n        require(refundAmount > 0, \"No payment to refund\");\n        require(balance >= refundAmount, \"Insufficient contract balance\");\n        \n        // Reset payment tracking\n        paidAmount = 0;\n        isDepositPaid = false;\n        isFunded = false;\n        \n        require(paymentToken.transfer(msg.sender, refundAmount), \"Refund transfer failed\");\n        emit FundsWithdrawn(msg.sender, refundAmount);\n    }\n\n    // Pay remaining balance for deposit-based offers\n    function payRemainingBalance() external nonReentrant onlyClient {\n        require(offerMetadata.depositAmount > 0, \"This offer doesn't require a deposit\");\n        require(isDepositPaid, \"Deposit not paid yet\");\n        require(!isFunded, \"Already fully funded\");\n        require(isAccepted, \"Offer must be accepted\");\n        \n        uint256 remainingAmount = offerMetadata.amount - paidAmount;\n        require(remainingAmount > 0, \"No remaining balance\");\n        \n        require(paymentToken.transferFrom(msg.sender, address(this), remainingAmount), \"Payment transfer failed\");\n        \n        paidAmount += remainingAmount;\n        isFunded = true;\n        \n        emit RemainingBalancePaid(msg.sender, remainingAmount);\n        emit OfferFunded(msg.sender, remainingAmount);\n    }\n    \n    // Mark offer as completed (owner only) - this also accepts the pending client\n    function completeOffer() external onlyOwner {\n        require(pendingClient != address(0), \"No pending client request\");\n        require(paidAmount > 0, \"No payment received\");\n        require(!isCompleted, \"Offer already completed\");\n        \n        // Accept the pending client\n        if (!isAccepted) {\n            client = pendingClient;\n            isAccepted = true;\n            emit OfferAccepted(client, block.timestamp);\n        }\n        \n        // Verify payment requirements\n        if (offerMetadata.depositAmount > 0) {\n            require(isDepositPaid, \"Deposit must be paid\");\n            // For deposit offers, completion doesn't require full funding\n            // The owner can complete the work and request remaining payment separately\n        } else {\n            require(isFunded, \"Contract must be funded\");\n        }\n        \n        isCompleted = true;\n        emit OfferCompleted(owner, block.timestamp);\n    }\n    \n    // Withdraw funds after completion (owner only)\n    function withdrawFunds() external onlyOwner nonReentrant {\n        require(isCompleted, \"Offer must be completed\");\n        \n        uint256 balance = paymentToken.balanceOf(address(this));\n        require(balance > 0, \"No funds to withdraw\");\n        \n        require(paymentToken.transfer(owner, balance), \"Withdrawal failed\");\n        emit FundsWithdrawn(owner, balance);\n    }\n    \n    // Emergency withdraw for client if deadline passed and not completed\n    function emergencyWithdraw() external nonReentrant {\n        require(paidAmount > 0, \"No payment made\"); // Works for both deposit and full payment\n        require(!isCompleted, \"Offer already completed\");\n        require(block.timestamp > offerMetadata.deadline, \"Deadline not reached\");\n        require(msg.sender == client, \"Only client can emergency withdraw\");\n        \n        uint256 balance = paymentToken.balanceOf(address(this));\n        require(balance > 0, \"No funds to withdraw\");\n        \n        require(paymentToken.transfer(client, balance), \"Emergency withdrawal failed\");\n        emit FundsWithdrawn(client, balance);\n    }\n    \n    // Deactivate offer (owner only) - prevents new applications but allows existing work to continue\n    function deactivateOffer() external onlyOwner {\n        require(offerMetadata.isActive, \"Offer is already deactivated\");\n        offerMetadata.isActive = false;\n        emit OfferDeactivated(owner, block.timestamp);\n    }\n    \n    // Get basic offer metadata\n    function getOfferMetadata() external view returns (OfferMetadata memory) {\n        return offerMetadata;\n    }\n    \n    // Get offer participants and status\n    function getOfferStatus() external view returns (OfferStatus memory) {\n        uint256 remainingAmount = 0;\n        if (offerMetadata.depositAmount > 0 && paidAmount < offerMetadata.amount) {\n            remainingAmount = offerMetadata.amount - paidAmount;\n        }\n        \n        return OfferStatus({\n            owner: owner,\n            client: client,\n            isAccepted: isAccepted,\n            isFunded: isFunded,\n            isCompleted: isCompleted,\n            isDepositPaid: isDepositPaid,\n            paidAmount: paidAmount,\n            remainingAmount: remainingAmount\n        });\n    }\n    \n    // Get remaining balance for deposit offers\n    function getRemainingBalance() external view returns (uint256) {\n        if (offerMetadata.depositAmount == 0 || paidAmount >= offerMetadata.amount) {\n            return 0;\n        }\n        return offerMetadata.amount - paidAmount;\n    }\n    \n    // Check if offer requires deposit\n    function getRequiresDeposit() external view returns (bool) {\n        return offerMetadata.depositAmount > 0;\n    }\n    \n    // Get deposit amount\n    function getDepositAmount() external view returns (uint256) {\n        return offerMetadata.depositAmount;\n    }\n    \n    // Get offer details (simplified version for backward compatibility)\n    function getOfferDetails() external view returns (\n        string memory title,\n        string memory description,\n        string memory serviceType,\n        string memory deliverables,\n        uint256 amount,\n        uint256 deadline,\n        bool isActive,\n        uint256 createdAt,\n        bool requiresDeposit,\n        uint256 depositAmount\n    ) {\n        return (\n            offerMetadata.title,\n            offerMetadata.description,\n            offerMetadata.serviceType,\n            offerMetadata.deliverables,\n            offerMetadata.amount,\n            offerMetadata.deadline,\n            offerMetadata.isActive,\n            offerMetadata.createdAt,\n            offerMetadata.depositAmount > 0, // Derived from depositAmount\n            offerMetadata.depositAmount\n        );\n    }\n    \n    // Get contract balance\n    function getContractBalance() external view returns (uint256) {\n        return paymentToken.balanceOf(address(this));\n    }\n    \n    // Get client offer request\n    function getClientOfferRequest(address _clientAddress) external view returns (ClientOfferRequest memory) {\n        return clientOfferRequests[_clientAddress];\n    }\n    \n    // Get all requester addresses\n    function getRequesterAddresses() external view returns (address[] memory) {\n        return requesterAddresses;\n    }\n    \n    // Get number of requests\n    function getRequestCount() external view returns (uint256) {\n        return requesterAddresses.length;\n    }\n    \n    // Get all offer requests in a single call\n    function getAllOfferRequests() external view returns (ClientOfferRequest[] memory) {\n        ClientOfferRequest[] memory allRequests = new ClientOfferRequest[](requesterAddresses.length);\n        \n        for (uint i = 0; i < requesterAddresses.length; i++) {\n            allRequests[i] = clientOfferRequests[requesterAddresses[i]];\n        }\n        \n        return allRequests;\n    }\n    \n    // Get offer requests for a specific client address\n    function getClientOfferRequests(address _clientAddress) external view returns (ClientOfferRequest memory) {\n        return clientOfferRequests[_clientAddress];\n    }\n}\n"
      }
    }
  }
}